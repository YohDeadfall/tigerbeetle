name: "Release (artifacts)"

on:
  # This only works for if you manually publish a release
  release:
    types: [published]

  workflow_call:
    secrets:
      TIGERBEETLE_NODE_PUBLISH_KEY:
        required: true
      NUGET_KEY:
        required: true
      MAVEN_GPG_SECRET_KEY:
        required: true
      MAVEN_CENTRAL_USERNAME:
        required: true
      MAVEN_CENTRAL_TOKEN:
        required: true
      MAVEN_GPG_SECRET_KEY_PASSWORD:
        required: true
      TIGERBEETLE_GO_DEPLOY_KEY:
        required: true
    inputs:
      dry-run:
        required: false
        type: string
      version:
        required: false
        type: string

jobs:
  version:
    outputs:
      version: ${{ steps.calculate_version.outputs.version }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
        fetch-depth: 0
    - id: calculate_version
      run: |
        version="${{ inputs.version }}"
        if [[ "$version" == ""  ]]; then
          # Must have been called from a manual release
          version="$(git tag --points-at ${{ github.sha }})"
        fi
        echo "version=$version" >> "$GITHUB_OUTPUT"
  
  build_and_upload_binaries:
    needs: version
    strategy:
      max-parallel: 2
      matrix:
        debug: ["", "--debug"]
        target: [aarch64-linux, x86_64-linux, x86_64-windows]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        # By default, this will do a shallow clone and won't have tags - which we need.
        # https://github.com/actions/checkout/issues/701
        submodules: recursive
        fetch-depth: 0

    - name: Build tigerbeetle
      run: ./scripts/install.sh ${{ matrix.debug }}
      env:
        TARGET: ${{ matrix.target }}
        CPU: ${{ matrix.target == 'aarch64-linux' && 'baseline+aes+neon' || matrix.target == 'aarch64-macos' && 'baseline+aes+neon' || 'x86_64_v3+aes' }}

    # Use github.sha, not HEAD, so we can't have any race conditions where a new commit gets
    # pushed before this pipeline runs. When invoked by workflow_call, this will be set to
    # the value that triggered the parent workflow. Even though technically that's a scheduled
    # call, GH set it to the last commit on the default branch.
    - name: Upload on release
      if: ${{ inputs.dry-run != 'true' }}
      run: |
        export GIT_TAG="${{ needs.version.outputs.version }}" && \
        export BINARY="$([ ${{ matrix.target }} = x86_64-windows ] && echo tigerbeetle.exe || echo tigerbeetle)" && \
        export ZIP_NAME="tigerbeetle-${{ matrix.target }}-${GIT_TAG}${{ matrix.debug }}.zip" && \
        zip -9 "${ZIP_NAME}" "${BINARY}" && \
        gh release upload "${GIT_TAG}" "${ZIP_NAME}"

      # Propagate token into environment
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Split out the macOS building from the step above, so we can build a universal binary.
  # This means 2 less binaries (one for debug, one for release) on the release page,
  # less chance of confusion by a macOS user downloading the wrong arch, and less
  # to do in a quick start script (no need to detect system arch).
  build_and_upload_binaries_macos:
    needs: version
    strategy:
      max-parallel: 2
      matrix:
        debug: ["", "--debug"]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        # By default, this will do a shallow clone and won't have tags - which we need.
        # https://github.com/actions/checkout/issues/701
        submodules: recursive
        fetch-depth: 0

    - name: Build tigerbeetle (aarch64)
      run: ./scripts/install.sh ${{ matrix.debug }} && mv tigerbeetle tigerbeetle-aarch64
      env:
        TARGET: aarch64-macos
        CPU: baseline+aes+neon

    - name: Build tigerbeetle (x86_64)
      run: ./scripts/install.sh ${{ matrix.debug }} && mv tigerbeetle tigerbeetle-x86_64
      env:
        TARGET: x86_64-macos
        CPU: x86_64_v3+aes

    - name: Build universal binary
      run: sudo apt-get update -y && sudo apt-get install -y llvm-14 && llvm-lipo-14 tigerbeetle-aarch64 tigerbeetle-x86_64 -create -output tigerbeetle
    # Use github.sha, not HEAD, so we can't have any race conditions where a new commit gets
    # pushed before this pipeline runs. When invoked by workflow_call, this will be set to
    # the value that triggered the parent workflow. Even though technically that's a scheduled
    # call, GH set it to the last commit on the default branch.
    - name: Upload on release
      if: ${{ inputs.dry-run != 'true' }}
      run: |
        export GIT_TAG="${{ needs.version.outputs.version }}" && \
        export BINARY="tigerbeetle" && \
        export ZIP_NAME="tigerbeetle-universal-macos-${GIT_TAG}${{ matrix.debug }}.zip" && \
        zip -9 "${ZIP_NAME}" "${BINARY}" && \
        gh release upload "${GIT_TAG}" "${ZIP_NAME}"

      # Propagate token into environment
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Publish all clients and Docker image.
  client-dotnet:
    needs: version
    uses: ./.github/workflows/clients-dotnet.yml
    secrets:
      NUGET_KEY: ${{ secrets.NUGET_KEY }}
    with:
      version: ${{needs.version.outputs.version}}

  client-go:
    needs: version
    uses: ./.github/workflows/clients-go.yml
    secrets:
      TIGERBEETLE_GO_DEPLOY_KEY: ${{ secrets.TIGERBEETLE_GO_DEPLOY_KEY }}
    with:
      version: ${{needs.version.outputs.version}}

  client-java:
    needs: version
    uses: ./.github/workflows/clients-java.yml
    secrets:
      MAVEN_GPG_SECRET_KEY: ${{ secrets.MAVEN_GPG_SECRET_KEY }}
      MAVEN_CENTRAL_USERNAME: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
      MAVEN_CENTRAL_TOKEN: ${{ secrets.MAVEN_CENTRAL_TOKEN }}
      MAVEN_GPG_SECRET_KEY_PASSWORD: ${{ secrets.MAVEN_GPG_SECRET_KEY_PASSWORD }}
    with:
      version: ${{needs.version.outputs.version}}

  client-node:
    needs: version
    uses: ./.github/workflows/clients-node.yml
    secrets:
      TIGERBEETLE_NODE_PUBLISH_KEY: ${{ secrets.TIGERBEETLE_NODE_PUBLISH_KEY }}
    with:
      version: ${{needs.version.outputs.version}}

  # For the Docker image
  linux:
    needs: version
    uses: ./.github/workflows/linux.yml
    with:
      version: ${{needs.version.outputs.version}}

  validate:
    if: '!cancelled()'
    needs: [version, build_and_upload_binaries, build_and_upload_binaries_macos, client-dotnet, client-go, client-java, client-node, linux]
    uses: ./.github/workflows/release_validate.yml
    with:
      version: ${{needs.version.outputs.version}}
